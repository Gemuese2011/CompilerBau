Grammar:

Rule 0     S' -> expression
Rule 1     expression -> VARIABLE_NAME IS ARRAY OF VAR_TYPE WITH L_SQUARE_BRACKETS value_list R_SQUARE_BRACKETS
Rule 2     expression -> CAST VARIABLE_NAME TO VAR_TYPE
Rule 3     expression -> VARIABLE_NAME ASSIGN expr
Rule 4     expression -> PRINT LPAREN statement RPAREN
Rule 5     expression -> COMMENT
Rule 6     expression -> declaration_list
Rule 7     declaration_list -> declaration declaration_list
Rule 8     declaration_list -> declaration
Rule 9     declaration -> CONSTANTS_PREFIX VARIABLE_NAME COLON VAR_TYPE ASSIGN VARIABLE_VALUE
Rule 10    declaration -> CONSTANTS_PREFIX VARIABLE_NAME IS VAR_TYPE ASSIGN VARIABLE_VALUE
Rule 11    declaration -> VARIABLE_PREFIX VARIABLE_NAME COLON VAR_TYPE ASSIGN VARIABLE_VALUE
Rule 12    declaration -> VARIABLE_PREFIX VARIABLE_NAME IS VAR_TYPE ASSIGN VARIABLE_VALUE
Rule 13    statement -> expr
Rule 14    statement -> VARIABLE_NAME L_SQUARE_BRACKETS VARIABLE_VALUE R_SQUARE_BRACKETS
Rule 15    statement -> VARIABLE_NAME
Rule 16    statement -> VARIABLES
Rule 17    statement -> NAMES
Rule 18    expr -> VARIABLE_NAME
Rule 19    expr -> VARIABLE_VALUE
Rule 20    expr -> LPAREN expr RPAREN
Rule 21    expr -> - expr  [precedence=right, level=3]
Rule 22    expr -> expr / expr  [precedence=left, level=2]
Rule 23    expr -> expr * expr  [precedence=left, level=2]
Rule 24    expr -> expr - expr  [precedence=left, level=1]
Rule 25    expr -> expr + expr  [precedence=left, level=1]
Rule 26    value_list -> VARIABLE_VALUE
Rule 27    value_list -> VARIABLE_VALUE COMMA value_list

Terminals, with rules where they appear:

*                    : 23
+                    : 25
-                    : 21 24
/                    : 22
ARRAY                : 1
ASSIGN               : 3 9 10 11 12
CAST                 : 2
COLON                : 9 11
COMMA                : 27
COMMENT              : 5
CONSTANTS_PREFIX     : 9 10
IS                   : 1 10 12
LPAREN               : 4 20
L_SQUARE_BRACKETS    : 1 14
NAMES                : 17
OF                   : 1
PRINT                : 4
RPAREN               : 4 20
R_SQUARE_BRACKETS    : 1 14
TO                   : 2
VARIABLES            : 16
VARIABLE_NAME        : 1 2 3 9 10 11 12 14 15 18
VARIABLE_PREFIX      : 11 12
VARIABLE_VALUE       : 9 10 11 12 14 19 26 27
VAR_TYPE             : 1 2 9 10 11 12
WITH                 : 1
error                : 

Nonterminals, with rules where they appear:

declaration          : 7 8
declaration_list     : 6 7
expr                 : 3 13 20 21 22 22 23 23 24 24 25 25
expression           : 0
statement            : 4
value_list           : 1 27


state 0

    (0) S' -> . expression
    (1) expression -> . VARIABLE_NAME IS ARRAY OF VAR_TYPE WITH L_SQUARE_BRACKETS value_list R_SQUARE_BRACKETS
    (2) expression -> . CAST VARIABLE_NAME TO VAR_TYPE
    (3) expression -> . VARIABLE_NAME ASSIGN expr
    (4) expression -> . PRINT LPAREN statement RPAREN
    (5) expression -> . COMMENT
    (6) expression -> . declaration_list
    (7) declaration_list -> . declaration declaration_list
    (8) declaration_list -> . declaration
    (9) declaration -> . CONSTANTS_PREFIX VARIABLE_NAME COLON VAR_TYPE ASSIGN VARIABLE_VALUE
    (10) declaration -> . CONSTANTS_PREFIX VARIABLE_NAME IS VAR_TYPE ASSIGN VARIABLE_VALUE
    (11) declaration -> . VARIABLE_PREFIX VARIABLE_NAME COLON VAR_TYPE ASSIGN VARIABLE_VALUE
    (12) declaration -> . VARIABLE_PREFIX VARIABLE_NAME IS VAR_TYPE ASSIGN VARIABLE_VALUE
    VARIABLE_NAME   shift and go to state 2
    CAST            shift and go to state 3
    PRINT           shift and go to state 4
    COMMENT         shift and go to state 5
    CONSTANTS_PREFIX shift and go to state 8
    VARIABLE_PREFIX shift and go to state 9

    expression                     shift and go to state 1
    declaration_list               shift and go to state 6
    declaration                    shift and go to state 7

state 1

    (0) S' -> expression .


state 2

    (1) expression -> VARIABLE_NAME . IS ARRAY OF VAR_TYPE WITH L_SQUARE_BRACKETS value_list R_SQUARE_BRACKETS
    (3) expression -> VARIABLE_NAME . ASSIGN expr
    IS              shift and go to state 10
    ASSIGN          shift and go to state 11


state 3

    (2) expression -> CAST . VARIABLE_NAME TO VAR_TYPE
    VARIABLE_NAME   shift and go to state 12


state 4

    (4) expression -> PRINT . LPAREN statement RPAREN
    LPAREN          shift and go to state 13


state 5

    (5) expression -> COMMENT .
    $end            reduce using rule 5 (expression -> COMMENT .)


state 6

    (6) expression -> declaration_list .
    $end            reduce using rule 6 (expression -> declaration_list .)


state 7

    (7) declaration_list -> declaration . declaration_list
    (8) declaration_list -> declaration .
    (7) declaration_list -> . declaration declaration_list
    (8) declaration_list -> . declaration
    (9) declaration -> . CONSTANTS_PREFIX VARIABLE_NAME COLON VAR_TYPE ASSIGN VARIABLE_VALUE
    (10) declaration -> . CONSTANTS_PREFIX VARIABLE_NAME IS VAR_TYPE ASSIGN VARIABLE_VALUE
    (11) declaration -> . VARIABLE_PREFIX VARIABLE_NAME COLON VAR_TYPE ASSIGN VARIABLE_VALUE
    (12) declaration -> . VARIABLE_PREFIX VARIABLE_NAME IS VAR_TYPE ASSIGN VARIABLE_VALUE
    $end            reduce using rule 8 (declaration_list -> declaration .)
    CONSTANTS_PREFIX shift and go to state 8
    VARIABLE_PREFIX shift and go to state 9

    declaration                    shift and go to state 7
    declaration_list               shift and go to state 14

state 8

    (9) declaration -> CONSTANTS_PREFIX . VARIABLE_NAME COLON VAR_TYPE ASSIGN VARIABLE_VALUE
    (10) declaration -> CONSTANTS_PREFIX . VARIABLE_NAME IS VAR_TYPE ASSIGN VARIABLE_VALUE
    VARIABLE_NAME   shift and go to state 15


state 9

    (11) declaration -> VARIABLE_PREFIX . VARIABLE_NAME COLON VAR_TYPE ASSIGN VARIABLE_VALUE
    (12) declaration -> VARIABLE_PREFIX . VARIABLE_NAME IS VAR_TYPE ASSIGN VARIABLE_VALUE
    VARIABLE_NAME   shift and go to state 16


state 10

    (1) expression -> VARIABLE_NAME IS . ARRAY OF VAR_TYPE WITH L_SQUARE_BRACKETS value_list R_SQUARE_BRACKETS
    ARRAY           shift and go to state 17


state 11

    (3) expression -> VARIABLE_NAME ASSIGN . expr
    (18) expr -> . VARIABLE_NAME
    (19) expr -> . VARIABLE_VALUE
    (20) expr -> . LPAREN expr RPAREN
    (21) expr -> . - expr
    (22) expr -> . expr / expr
    (23) expr -> . expr * expr
    (24) expr -> . expr - expr
    (25) expr -> . expr + expr
    VARIABLE_NAME   shift and go to state 18
    VARIABLE_VALUE  shift and go to state 20
    LPAREN          shift and go to state 21
    -               shift and go to state 22

    expr                           shift and go to state 19

state 12

    (2) expression -> CAST VARIABLE_NAME . TO VAR_TYPE
    TO              shift and go to state 23


state 13

    (4) expression -> PRINT LPAREN . statement RPAREN
    (13) statement -> . expr
    (14) statement -> . VARIABLE_NAME L_SQUARE_BRACKETS VARIABLE_VALUE R_SQUARE_BRACKETS
    (15) statement -> . VARIABLE_NAME
    (16) statement -> . VARIABLES
    (17) statement -> . NAMES
    (18) expr -> . VARIABLE_NAME
    (19) expr -> . VARIABLE_VALUE
    (20) expr -> . LPAREN expr RPAREN
    (21) expr -> . - expr
    (22) expr -> . expr / expr
    (23) expr -> . expr * expr
    (24) expr -> . expr - expr
    (25) expr -> . expr + expr
    VARIABLE_NAME   shift and go to state 26
    VARIABLES       shift and go to state 27
    NAMES           shift and go to state 28
    VARIABLE_VALUE  shift and go to state 20
    LPAREN          shift and go to state 21
    -               shift and go to state 22

    statement                      shift and go to state 24
    expr                           shift and go to state 25

state 14

    (7) declaration_list -> declaration declaration_list .
    $end            reduce using rule 7 (declaration_list -> declaration declaration_list .)


state 15

    (9) declaration -> CONSTANTS_PREFIX VARIABLE_NAME . COLON VAR_TYPE ASSIGN VARIABLE_VALUE
    (10) declaration -> CONSTANTS_PREFIX VARIABLE_NAME . IS VAR_TYPE ASSIGN VARIABLE_VALUE
    COLON           shift and go to state 29
    IS              shift and go to state 30


state 16

    (11) declaration -> VARIABLE_PREFIX VARIABLE_NAME . COLON VAR_TYPE ASSIGN VARIABLE_VALUE
    (12) declaration -> VARIABLE_PREFIX VARIABLE_NAME . IS VAR_TYPE ASSIGN VARIABLE_VALUE
    COLON           shift and go to state 31
    IS              shift and go to state 32


state 17

    (1) expression -> VARIABLE_NAME IS ARRAY . OF VAR_TYPE WITH L_SQUARE_BRACKETS value_list R_SQUARE_BRACKETS
    OF              shift and go to state 33


state 18

    (18) expr -> VARIABLE_NAME .
    /               reduce using rule 18 (expr -> VARIABLE_NAME .)
    *               reduce using rule 18 (expr -> VARIABLE_NAME .)
    -               reduce using rule 18 (expr -> VARIABLE_NAME .)
    +               reduce using rule 18 (expr -> VARIABLE_NAME .)
    $end            reduce using rule 18 (expr -> VARIABLE_NAME .)
    RPAREN          reduce using rule 18 (expr -> VARIABLE_NAME .)


state 19

    (3) expression -> VARIABLE_NAME ASSIGN expr .
    (22) expr -> expr . / expr
    (23) expr -> expr . * expr
    (24) expr -> expr . - expr
    (25) expr -> expr . + expr
    $end            reduce using rule 3 (expression -> VARIABLE_NAME ASSIGN expr .)
    /               shift and go to state 34
    *               shift and go to state 35
    -               shift and go to state 36
    +               shift and go to state 37


state 20

    (19) expr -> VARIABLE_VALUE .
    /               reduce using rule 19 (expr -> VARIABLE_VALUE .)
    *               reduce using rule 19 (expr -> VARIABLE_VALUE .)
    -               reduce using rule 19 (expr -> VARIABLE_VALUE .)
    +               reduce using rule 19 (expr -> VARIABLE_VALUE .)
    $end            reduce using rule 19 (expr -> VARIABLE_VALUE .)
    RPAREN          reduce using rule 19 (expr -> VARIABLE_VALUE .)


state 21

    (20) expr -> LPAREN . expr RPAREN
    (18) expr -> . VARIABLE_NAME
    (19) expr -> . VARIABLE_VALUE
    (20) expr -> . LPAREN expr RPAREN
    (21) expr -> . - expr
    (22) expr -> . expr / expr
    (23) expr -> . expr * expr
    (24) expr -> . expr - expr
    (25) expr -> . expr + expr
    VARIABLE_NAME   shift and go to state 18
    VARIABLE_VALUE  shift and go to state 20
    LPAREN          shift and go to state 21
    -               shift and go to state 22

    expr                           shift and go to state 38

state 22

    (21) expr -> - . expr
    (18) expr -> . VARIABLE_NAME
    (19) expr -> . VARIABLE_VALUE
    (20) expr -> . LPAREN expr RPAREN
    (21) expr -> . - expr
    (22) expr -> . expr / expr
    (23) expr -> . expr * expr
    (24) expr -> . expr - expr
    (25) expr -> . expr + expr
    VARIABLE_NAME   shift and go to state 18
    VARIABLE_VALUE  shift and go to state 20
    LPAREN          shift and go to state 21
    -               shift and go to state 22

    expr                           shift and go to state 39

state 23

    (2) expression -> CAST VARIABLE_NAME TO . VAR_TYPE
    VAR_TYPE        shift and go to state 40


state 24

    (4) expression -> PRINT LPAREN statement . RPAREN
    RPAREN          shift and go to state 41


state 25

    (13) statement -> expr .
    (22) expr -> expr . / expr
    (23) expr -> expr . * expr
    (24) expr -> expr . - expr
    (25) expr -> expr . + expr
    RPAREN          reduce using rule 13 (statement -> expr .)
    /               shift and go to state 34
    *               shift and go to state 35
    -               shift and go to state 36
    +               shift and go to state 37


state 26

    (14) statement -> VARIABLE_NAME . L_SQUARE_BRACKETS VARIABLE_VALUE R_SQUARE_BRACKETS
    (15) statement -> VARIABLE_NAME .
    (18) expr -> VARIABLE_NAME .
  ! reduce/reduce conflict for RPAREN resolved using rule 15 (statement -> VARIABLE_NAME .)
    L_SQUARE_BRACKETS shift and go to state 42
    RPAREN          reduce using rule 15 (statement -> VARIABLE_NAME .)
    /               reduce using rule 18 (expr -> VARIABLE_NAME .)
    *               reduce using rule 18 (expr -> VARIABLE_NAME .)
    -               reduce using rule 18 (expr -> VARIABLE_NAME .)
    +               reduce using rule 18 (expr -> VARIABLE_NAME .)


state 27

    (16) statement -> VARIABLES .
    RPAREN          reduce using rule 16 (statement -> VARIABLES .)


state 28

    (17) statement -> NAMES .
    RPAREN          reduce using rule 17 (statement -> NAMES .)


state 29

    (9) declaration -> CONSTANTS_PREFIX VARIABLE_NAME COLON . VAR_TYPE ASSIGN VARIABLE_VALUE
    VAR_TYPE        shift and go to state 43


state 30

    (10) declaration -> CONSTANTS_PREFIX VARIABLE_NAME IS . VAR_TYPE ASSIGN VARIABLE_VALUE
    VAR_TYPE        shift and go to state 44


state 31

    (11) declaration -> VARIABLE_PREFIX VARIABLE_NAME COLON . VAR_TYPE ASSIGN VARIABLE_VALUE
    VAR_TYPE        shift and go to state 45


state 32

    (12) declaration -> VARIABLE_PREFIX VARIABLE_NAME IS . VAR_TYPE ASSIGN VARIABLE_VALUE
    VAR_TYPE        shift and go to state 46


state 33

    (1) expression -> VARIABLE_NAME IS ARRAY OF . VAR_TYPE WITH L_SQUARE_BRACKETS value_list R_SQUARE_BRACKETS
    VAR_TYPE        shift and go to state 47


state 34

    (22) expr -> expr / . expr
    (18) expr -> . VARIABLE_NAME
    (19) expr -> . VARIABLE_VALUE
    (20) expr -> . LPAREN expr RPAREN
    (21) expr -> . - expr
    (22) expr -> . expr / expr
    (23) expr -> . expr * expr
    (24) expr -> . expr - expr
    (25) expr -> . expr + expr
    VARIABLE_NAME   shift and go to state 18
    VARIABLE_VALUE  shift and go to state 20
    LPAREN          shift and go to state 21
    -               shift and go to state 22

    expr                           shift and go to state 48

state 35

    (23) expr -> expr * . expr
    (18) expr -> . VARIABLE_NAME
    (19) expr -> . VARIABLE_VALUE
    (20) expr -> . LPAREN expr RPAREN
    (21) expr -> . - expr
    (22) expr -> . expr / expr
    (23) expr -> . expr * expr
    (24) expr -> . expr - expr
    (25) expr -> . expr + expr
    VARIABLE_NAME   shift and go to state 18
    VARIABLE_VALUE  shift and go to state 20
    LPAREN          shift and go to state 21
    -               shift and go to state 22

    expr                           shift and go to state 49

state 36

    (24) expr -> expr - . expr
    (18) expr -> . VARIABLE_NAME
    (19) expr -> . VARIABLE_VALUE
    (20) expr -> . LPAREN expr RPAREN
    (21) expr -> . - expr
    (22) expr -> . expr / expr
    (23) expr -> . expr * expr
    (24) expr -> . expr - expr
    (25) expr -> . expr + expr
    VARIABLE_NAME   shift and go to state 18
    VARIABLE_VALUE  shift and go to state 20
    LPAREN          shift and go to state 21
    -               shift and go to state 22

    expr                           shift and go to state 50

state 37

    (25) expr -> expr + . expr
    (18) expr -> . VARIABLE_NAME
    (19) expr -> . VARIABLE_VALUE
    (20) expr -> . LPAREN expr RPAREN
    (21) expr -> . - expr
    (22) expr -> . expr / expr
    (23) expr -> . expr * expr
    (24) expr -> . expr - expr
    (25) expr -> . expr + expr
    VARIABLE_NAME   shift and go to state 18
    VARIABLE_VALUE  shift and go to state 20
    LPAREN          shift and go to state 21
    -               shift and go to state 22

    expr                           shift and go to state 51

state 38

    (20) expr -> LPAREN expr . RPAREN
    (22) expr -> expr . / expr
    (23) expr -> expr . * expr
    (24) expr -> expr . - expr
    (25) expr -> expr . + expr
    RPAREN          shift and go to state 52
    /               shift and go to state 34
    *               shift and go to state 35
    -               shift and go to state 36
    +               shift and go to state 37


state 39

    (21) expr -> - expr .
    (22) expr -> expr . / expr
    (23) expr -> expr . * expr
    (24) expr -> expr . - expr
    (25) expr -> expr . + expr
    /               reduce using rule 21 (expr -> - expr .)
    *               reduce using rule 21 (expr -> - expr .)
    -               reduce using rule 21 (expr -> - expr .)
    +               reduce using rule 21 (expr -> - expr .)
    $end            reduce using rule 21 (expr -> - expr .)
    RPAREN          reduce using rule 21 (expr -> - expr .)


state 40

    (2) expression -> CAST VARIABLE_NAME TO VAR_TYPE .
    $end            reduce using rule 2 (expression -> CAST VARIABLE_NAME TO VAR_TYPE .)


state 41

    (4) expression -> PRINT LPAREN statement RPAREN .
    $end            reduce using rule 4 (expression -> PRINT LPAREN statement RPAREN .)


state 42

    (14) statement -> VARIABLE_NAME L_SQUARE_BRACKETS . VARIABLE_VALUE R_SQUARE_BRACKETS
    VARIABLE_VALUE  shift and go to state 53


state 43

    (9) declaration -> CONSTANTS_PREFIX VARIABLE_NAME COLON VAR_TYPE . ASSIGN VARIABLE_VALUE
    ASSIGN          shift and go to state 54


state 44

    (10) declaration -> CONSTANTS_PREFIX VARIABLE_NAME IS VAR_TYPE . ASSIGN VARIABLE_VALUE
    ASSIGN          shift and go to state 55


state 45

    (11) declaration -> VARIABLE_PREFIX VARIABLE_NAME COLON VAR_TYPE . ASSIGN VARIABLE_VALUE
    ASSIGN          shift and go to state 56


state 46

    (12) declaration -> VARIABLE_PREFIX VARIABLE_NAME IS VAR_TYPE . ASSIGN VARIABLE_VALUE
    ASSIGN          shift and go to state 57


state 47

    (1) expression -> VARIABLE_NAME IS ARRAY OF VAR_TYPE . WITH L_SQUARE_BRACKETS value_list R_SQUARE_BRACKETS
    WITH            shift and go to state 58


state 48

    (22) expr -> expr / expr .
    (22) expr -> expr . / expr
    (23) expr -> expr . * expr
    (24) expr -> expr . - expr
    (25) expr -> expr . + expr
    /               reduce using rule 22 (expr -> expr / expr .)
    *               reduce using rule 22 (expr -> expr / expr .)
    -               reduce using rule 22 (expr -> expr / expr .)
    +               reduce using rule 22 (expr -> expr / expr .)
    $end            reduce using rule 22 (expr -> expr / expr .)
    RPAREN          reduce using rule 22 (expr -> expr / expr .)


state 49

    (23) expr -> expr * expr .
    (22) expr -> expr . / expr
    (23) expr -> expr . * expr
    (24) expr -> expr . - expr
    (25) expr -> expr . + expr
    /               reduce using rule 23 (expr -> expr * expr .)
    *               reduce using rule 23 (expr -> expr * expr .)
    -               reduce using rule 23 (expr -> expr * expr .)
    +               reduce using rule 23 (expr -> expr * expr .)
    $end            reduce using rule 23 (expr -> expr * expr .)
    RPAREN          reduce using rule 23 (expr -> expr * expr .)


state 50

    (24) expr -> expr - expr .
    (22) expr -> expr . / expr
    (23) expr -> expr . * expr
    (24) expr -> expr . - expr
    (25) expr -> expr . + expr
    -               reduce using rule 24 (expr -> expr - expr .)
    +               reduce using rule 24 (expr -> expr - expr .)
    $end            reduce using rule 24 (expr -> expr - expr .)
    RPAREN          reduce using rule 24 (expr -> expr - expr .)
    /               shift and go to state 34
    *               shift and go to state 35


state 51

    (25) expr -> expr + expr .
    (22) expr -> expr . / expr
    (23) expr -> expr . * expr
    (24) expr -> expr . - expr
    (25) expr -> expr . + expr
    -               reduce using rule 25 (expr -> expr + expr .)
    +               reduce using rule 25 (expr -> expr + expr .)
    $end            reduce using rule 25 (expr -> expr + expr .)
    RPAREN          reduce using rule 25 (expr -> expr + expr .)
    /               shift and go to state 34
    *               shift and go to state 35


state 52

    (20) expr -> LPAREN expr RPAREN .
    /               reduce using rule 20 (expr -> LPAREN expr RPAREN .)
    *               reduce using rule 20 (expr -> LPAREN expr RPAREN .)
    -               reduce using rule 20 (expr -> LPAREN expr RPAREN .)
    +               reduce using rule 20 (expr -> LPAREN expr RPAREN .)
    $end            reduce using rule 20 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 20 (expr -> LPAREN expr RPAREN .)


state 53

    (14) statement -> VARIABLE_NAME L_SQUARE_BRACKETS VARIABLE_VALUE . R_SQUARE_BRACKETS
    R_SQUARE_BRACKETS shift and go to state 59


state 54

    (9) declaration -> CONSTANTS_PREFIX VARIABLE_NAME COLON VAR_TYPE ASSIGN . VARIABLE_VALUE
    VARIABLE_VALUE  shift and go to state 60


state 55

    (10) declaration -> CONSTANTS_PREFIX VARIABLE_NAME IS VAR_TYPE ASSIGN . VARIABLE_VALUE
    VARIABLE_VALUE  shift and go to state 61


state 56

    (11) declaration -> VARIABLE_PREFIX VARIABLE_NAME COLON VAR_TYPE ASSIGN . VARIABLE_VALUE
    VARIABLE_VALUE  shift and go to state 62


state 57

    (12) declaration -> VARIABLE_PREFIX VARIABLE_NAME IS VAR_TYPE ASSIGN . VARIABLE_VALUE
    VARIABLE_VALUE  shift and go to state 63


state 58

    (1) expression -> VARIABLE_NAME IS ARRAY OF VAR_TYPE WITH . L_SQUARE_BRACKETS value_list R_SQUARE_BRACKETS
    L_SQUARE_BRACKETS shift and go to state 64


state 59

    (14) statement -> VARIABLE_NAME L_SQUARE_BRACKETS VARIABLE_VALUE R_SQUARE_BRACKETS .
    RPAREN          reduce using rule 14 (statement -> VARIABLE_NAME L_SQUARE_BRACKETS VARIABLE_VALUE R_SQUARE_BRACKETS .)


state 60

    (9) declaration -> CONSTANTS_PREFIX VARIABLE_NAME COLON VAR_TYPE ASSIGN VARIABLE_VALUE .
    CONSTANTS_PREFIX reduce using rule 9 (declaration -> CONSTANTS_PREFIX VARIABLE_NAME COLON VAR_TYPE ASSIGN VARIABLE_VALUE .)
    VARIABLE_PREFIX reduce using rule 9 (declaration -> CONSTANTS_PREFIX VARIABLE_NAME COLON VAR_TYPE ASSIGN VARIABLE_VALUE .)
    $end            reduce using rule 9 (declaration -> CONSTANTS_PREFIX VARIABLE_NAME COLON VAR_TYPE ASSIGN VARIABLE_VALUE .)


state 61

    (10) declaration -> CONSTANTS_PREFIX VARIABLE_NAME IS VAR_TYPE ASSIGN VARIABLE_VALUE .
    CONSTANTS_PREFIX reduce using rule 10 (declaration -> CONSTANTS_PREFIX VARIABLE_NAME IS VAR_TYPE ASSIGN VARIABLE_VALUE .)
    VARIABLE_PREFIX reduce using rule 10 (declaration -> CONSTANTS_PREFIX VARIABLE_NAME IS VAR_TYPE ASSIGN VARIABLE_VALUE .)
    $end            reduce using rule 10 (declaration -> CONSTANTS_PREFIX VARIABLE_NAME IS VAR_TYPE ASSIGN VARIABLE_VALUE .)


state 62

    (11) declaration -> VARIABLE_PREFIX VARIABLE_NAME COLON VAR_TYPE ASSIGN VARIABLE_VALUE .
    CONSTANTS_PREFIX reduce using rule 11 (declaration -> VARIABLE_PREFIX VARIABLE_NAME COLON VAR_TYPE ASSIGN VARIABLE_VALUE .)
    VARIABLE_PREFIX reduce using rule 11 (declaration -> VARIABLE_PREFIX VARIABLE_NAME COLON VAR_TYPE ASSIGN VARIABLE_VALUE .)
    $end            reduce using rule 11 (declaration -> VARIABLE_PREFIX VARIABLE_NAME COLON VAR_TYPE ASSIGN VARIABLE_VALUE .)


state 63

    (12) declaration -> VARIABLE_PREFIX VARIABLE_NAME IS VAR_TYPE ASSIGN VARIABLE_VALUE .
    CONSTANTS_PREFIX reduce using rule 12 (declaration -> VARIABLE_PREFIX VARIABLE_NAME IS VAR_TYPE ASSIGN VARIABLE_VALUE .)
    VARIABLE_PREFIX reduce using rule 12 (declaration -> VARIABLE_PREFIX VARIABLE_NAME IS VAR_TYPE ASSIGN VARIABLE_VALUE .)
    $end            reduce using rule 12 (declaration -> VARIABLE_PREFIX VARIABLE_NAME IS VAR_TYPE ASSIGN VARIABLE_VALUE .)


state 64

    (1) expression -> VARIABLE_NAME IS ARRAY OF VAR_TYPE WITH L_SQUARE_BRACKETS . value_list R_SQUARE_BRACKETS
    (26) value_list -> . VARIABLE_VALUE
    (27) value_list -> . VARIABLE_VALUE COMMA value_list
    VARIABLE_VALUE  shift and go to state 66

    value_list                     shift and go to state 65

state 65

    (1) expression -> VARIABLE_NAME IS ARRAY OF VAR_TYPE WITH L_SQUARE_BRACKETS value_list . R_SQUARE_BRACKETS
    R_SQUARE_BRACKETS shift and go to state 67


state 66

    (26) value_list -> VARIABLE_VALUE .
    (27) value_list -> VARIABLE_VALUE . COMMA value_list
    R_SQUARE_BRACKETS reduce using rule 26 (value_list -> VARIABLE_VALUE .)
    COMMA           shift and go to state 68


state 67

    (1) expression -> VARIABLE_NAME IS ARRAY OF VAR_TYPE WITH L_SQUARE_BRACKETS value_list R_SQUARE_BRACKETS .
    $end            reduce using rule 1 (expression -> VARIABLE_NAME IS ARRAY OF VAR_TYPE WITH L_SQUARE_BRACKETS value_list R_SQUARE_BRACKETS .)


state 68

    (27) value_list -> VARIABLE_VALUE COMMA . value_list
    (26) value_list -> . VARIABLE_VALUE
    (27) value_list -> . VARIABLE_VALUE COMMA value_list
    VARIABLE_VALUE  shift and go to state 66

    value_list                     shift and go to state 69

state 69

    (27) value_list -> VARIABLE_VALUE COMMA value_list .
    R_SQUARE_BRACKETS reduce using rule 27 (value_list -> VARIABLE_VALUE COMMA value_list .)


Conflicts:

reduce/reduce conflict in state 26 resolved using rule statement -> VARIABLE_NAME
rejected rule (expr -> VARIABLE_NAME) in state 26